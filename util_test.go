package gocbcore

import (
	"reflect"
	"testing"
)

func TestAppendUleb128_32(t *testing.T) {
	tests := []struct {
		name string
		id   uint32
		want []byte
	}{
		{name: "0x00", id: 0x00, want: []byte{0x00}},
		{name: "0x01", id: 0x01, want: []byte{0x01}},
		{name: "0x7F", id: 0x7F, want: []byte{0x7F}},
		{name: "0x80", id: 0x80, want: []byte{0x80, 0x01}},
		{name: "0x555", id: 0x555, want: []byte{0xD5, 0x0A}},
		{name: "0x7FFF", id: 0x7FFF, want: []byte{0xFF, 0xFF, 0x01}},
		{name: "0xBFFF", id: 0xBFFF, want: []byte{0xFF, 0xFF, 0x02}},
		{name: "0xFFFF", id: 0xFFFF, want: []byte{0xFF, 0xFF, 0x03}},
		{name: "0x8000", id: 0x8000, want: []byte{0x80, 0x80, 0x02}},
		{name: "0x5555", id: 0x5555, want: []byte{0xD5, 0xAA, 0x01}},
		{name: "0xCAFEF00", id: 0xCAFEF00, want: []byte{0x80, 0xDE, 0xBF, 0x65}},
		{name: "0xCAFEF00D", id: 0xCAFEF00D, want: []byte{0x8D, 0xE0, 0xFB, 0xD7, 0x0C}},
		{name: "0xFFFFFFFF", id: 0xFFFFFFFF, want: []byte{0xFF, 0xFF, 0xFF, 0xFF, 0x0F}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := appendUleb128_32([]byte{}, tt.id); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("appendUleb128_32() = %v, want %v", got, tt.want)
			}
		})
	}
}
